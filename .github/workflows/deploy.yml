name: Deploy Aurora Watch Lambda

on:
  push:
    branches:
      - main

jobs:
  test_and_deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.12'

    - name: Install global dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests boto3 # For API Gateway test

    - name: Install and build harvest lambda
      run: |
        cd lambda
        pip install -r requirements.txt -t .
        zip -r ../harvest-function.zip .

    - name: Install and build service lambda
      run: |
        cd service
        pip install -r requirements.txt -t .
        zip -r ../service-function.zip .

    - name: Run unit tests
      run: |
        cd service
  # python -m unittest discover -v

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Terraform Init
      run: |
        terraform init

    - name: Terraform Plan
      run: |
        terraform plan -out=tfplan -var="aws_region=${{ secrets.AWS_REGION }}" -var="sns_email_address=${{ secrets.SNS_EMAIL_ADDRESS }}" 

    - name: Terraform Apply
      run: |
        terraform apply -auto-approve tfplan

    - name: Terraform Output
      run: |
        terraform output -json > terraform_output.json
        cat terraform_output.json

    - name: Install and configure Amplify CLI
      run: |
        npm install -g @aws-amplify/cli
        amplify configure --no-interactive --region ${{ secrets.AWS_REGION }}

    - name: Generate aws-exports.js
      run: |
        # Extract Cognito information from Terraform output
        USER_POOL_ID=$(jq -r '.cognito_user_pool_id.value' terraform_output.json)
        APP_CLIENT_ID=$(jq -r '.cognito_app_client_id.value' terraform_output.json)
        IDENTITY_POOL_ID=$(jq -r '.cognito_identity_pool_id.value' terraform_output.json)
        
        # Create aws-exports.js file in the ui directory
        echo "const awsmobile = {
          'aws_project_region': '${{ secrets.AWS_REGION }}',
          'aws_cognito_region': '${{ secrets.AWS_REGION }}',
          'aws_user_pools_id': '$USER_POOL_ID',
          'aws_user_pools_web_client_id': '$APP_CLIENT_ID',
          'aws_cognito_identity_pool_id': '$IDENTITY_POOL_ID',
          'oauth': {},
          'aws_cognito_username_attributes': [],
          'aws_cognito_social_providers': [],
          'aws_cognito_signup_attributes': [],
          'aws_cognito_mfa_configuration': 'OFF',
          'aws_cognito_mfa_types': [],
          'aws_cognito_password_protection_settings': {
            'passwordPolicyMinLength': 8,
            'passwordPolicyCharacters': [
                'REQUIRES_LOWERCASE',
                'REQUIRES_UPPERCASE',
                'REQUIRES_NUMBERS',
                'REQUIRES_SYMBOLS'
            ]
          },
          'aws_cognito_verification_mechanisms': [
            'EMAIL'
          ]
        };" > ui/src/aws-exports.ts
        echo "export default awsmobile;" >> ui/src/aws-exports.ts

    - name: Run API Gateway test
      env:
        COGNITO_TEST_USERNAME: ${{ secrets.TEST_USERNAME }}
        COGNITO_TEST_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
      run: |
        export COGNITO_CLIENT_ID=$(jq -r '.cognito_app_client_id.value' terraform_output.json)
        export COGNITO_USER_POOL_ID=$(jq -r '.cognito_user_pool_id.value' terraform_output.json)
        python test_api_gateway.py

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18'

    - name: Install UI dependencies
      run: |
        cd ui
        npm install

    - name: Build UI
      run: |
        cd ui
        npm run build

    - name: Deploy UI to S3
      run: |
        # Get the bucket name from terraform output
        BUCKET_NAME=$(jq -r '.bucket_name.value' terraform_output.json)
        pwd
        ls -la 
        ls -la ui
        ls -la ui/dist
        echo "Syncing to S3 bucket: $BUCKET_NAME"
        # Sync the dist directory to S3
        aws s3 sync ui/dist/ s3://$BUCKET_NAME --delete
